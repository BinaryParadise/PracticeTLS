//
//  File.swift
//  
//
//  Created by Rake Yang on 2021/8/27.
//

import Foundation
import XCTest
import Foundation
import CryptoSwift
@testable import PracticeTLS

class ECDHETests: XCTestCase {
    func testECDHE() throws {
        let pubKey: [UInt8] = [0x04, 0x56, 0x2b, 0xfe, 0xed, 0x8a, 0x7e, 0xe1, 0x23, 0xd2, 0x5f, 0xc4, 0xec, 0x4c, 0xe8, 0x68,
                               0x9a, 0xc4, 0x9f, 0x73, 0x2c, 0x14, 0xbe, 0x7a, 0xac, 0xd3, 0x90, 0xb9, 0x70, 0xb6, 0x3a, 0x56,
                               0x35, 0x0a, 0x87, 0x72, 0x8f, 0x30, 0x0f, 0x0b, 0x2b, 0xcf, 0x86, 0xb2, 0x57, 0xdc, 0x6a, 0x30,
                               0x9f, 0x31, 0xf3, 0x4e, 0x0c, 0xa1, 0xf6, 0x5b, 0xc2, 0xbe, 0x02, 0x64, 0x62, 0x2c, 0xd1, 0xa2,
                               0xf1]
        let ecdh = ECDHEncryptor(pubKey)
        let plantData: [UInt8] = ecdh.shared1
        let encrypted = ecdh.encrypt(ecdh.shared1)
        let decrypted = ecdh.decrypt(encrypted ?? [])
        XCTAssert(plantData.count > 0)
        XCTAssertEqual(plantData, decrypted)
    }
    
//    let key = """
//        BAgw2JnCKVMQthFSbvKP6jxz6GTCHddQP9p1QFyQchTmEooFJ2ep4yuKmUDBsS698TTQ9e8mKF2d\
//        tUCrrOG1B34=
//        """
    
    func testA() {
        let keyData = Data([0x04, 0x0E, 0x0D, 0x80, 0x5F, 0xD6, 0xD0, 0xC5, 0xEC, 0x27, 0x35, 0xA5, 0x37, 0x57, 0xBB, 0xCC, 0xD8, 0x6F, 0x8B, 0x15, 0x29, 0xB5, 0xE7, 0x70, 0x00, 0x33, 0x4F, 0x23, 0xEB, 0x79, 0x9F, 0x54, 0x56, 0x85, 0x97, 0x90, 0x92, 0xE7, 0x29, 0xCA, 0x54, 0x2F, 0x0F, 0x27, 0xE0, 0xC7, 0xAE, 0x50, 0xF1, 0xA5, 0xC0, 0xE4, 0x4A, 0xA7, 0x90, 0x39, 0xC1, 0x4A, 0x58, 0x3E, 0x17, 0xE3, 0x24, 0x08, 0xEF, ])
        var error: Unmanaged<CFError>? = nil
        let key = SecKeyCreateWithData(keyData as NSData, [
            kSecAttrKeyType: kSecAttrKeyTypeEC,
            kSecAttrKeyClass: kSecAttrKeyClassPublic
        ] as NSDictionary, &error)
        print("\(key)\n\(error)")
    }
}
