//
//  KeysGeneratorTests.swift
//  
//
//  Created by Rake Yang on 2021/8/23.
//

import Foundation

import XCTest
import Foundation
import CryptoSwift
@testable import PracticeTLS

class KeysGeneratorTests: XCTestCase {
    
    func testFinishedMessageRSA() throws {
        let preMasterSecret: [UInt8] = "0303AD847A00DE47DB7335C5EFED856C79423C59A3377C527616AF80E582A2F0C9BBE3D15B8650B2E91F2E09EE732BEA".uint8Array
        let clientRandom: [UInt8] = "E2BFE47D78199242E10CDB5B3F0D1FD072232626CDE9E766DA5D189023CDAC4F".uint8Array
        let serverRandom: [UInt8] = "26E9F2D927F7481234B430596EB3270898657D81B3092B2DEEDC22A1C82D56F4".uint8Array
        
        let clientCipherData:[UInt8] = "00000000000000007684E9A0E129417FCD73676101B975AF613B0E942EAE0D25E8DF113825806037".uint8Array
        
        let handshakeData:[UIntuint8Array //false
        let transcriptHash0:[UInt8] = "ED66013D05422CAFE7516DB15810179D03153C24824DD0CBF36087297C1A8B20".uint8Array
        let verifyData0:[UInt8] = "3C7DB814D307666CD946958A".uint8Array
        
        let transcriptHash1:[UInt8] = "61E5CB1E7263ECDDAA690BF5EB6AA1DEC857AC3BF61837A8F56A022C8D2C5815".uint8Array
        let verifyData1:[UInt8] = "5BD25347B13AF1086585AA7A".uint8Array
        //encrypt---------------------
        let writeIV: [UInt8] = "75DD79186B4859C94401910A".uint8Array
        
        let s = TLSSecurityParameters(.TLS_RSA_WITH_AES_128_GCM_SHA256)
        s.clientRandom = clientRandom
        s.serverRandom = serverRandom
        s.keyExchange(algorithm: .rsa, preMasterSecret: preMasterSecret)
        
        let myhash = s.hashAlgorithm.hashFunction(handshakeData)
        
        XCTAssertEqual(transcriptHash0, myhash)
        
        XCTAssertEqual(verifyData0.toHexString(), s.PRF(secret: s.masterSecret, label: TLSClientFinishedLabel, seed: myhash, outputLength: 12).toHexString())
                                        
        let data = TLSFinished(verifyData0).dataWithBytes()
            
        s.writeEncryptionParameters = s.readEncryptionParameters
        let recordIV = [UInt8](clientCipherData[0..<s.recordIVLength])
        let encrypted = s.encrypt(data, contentType: .handshake(.finished), iv: recordIV)
        XCTAssertEqual(clientCipherData.toHexString(), encrypted?.toHexString())
        
    }
    
    func testAESEncrypt2() throws {
        let clientCipherData:[UInt8] = [0x0C, 0xC2, 0x1F, 0x2F, 0x03, 0x3D, 0x3F, 0x59, 0x3F, 0xC1, 0x8C, 0x5C, 0xE4, 0x2D, 0xAB, 0xC6, 0xEA, 0xF2, 0x31, 0xDB, 0xE7, 0xEA, 0x08, 0x1D, 0xD6, 0x0A, 0x30, 0x27, 0x82, 0xEF, 0x15, 0x93, 0x26, 0xAC, 0x46, 0x3E, 0x6B, 0x03, 0xAB, 0x57, 0xBE, 0x78, 0xBB, 0x25, 0xB9, 0xE6, 0xEB, 0x80, 0x3F, 0xFC, 0x13, 0xA4, 0x03, 0x31, 0x45, 0xAA, 0xF6, 0x7B, 0xDE, 0xBA, 0x9C, 0x85, 0x2A, 0xEE, 0x2D, 0x39, 0xEC, 0xF7, 0x57, 0x45, 0xAE, 0xD6, 0xD1, 0x74, 0x5E, 0xFF, 0xBE, 0x26, 0x43, 0x72, ]
        let preMasterSecret:[UInt8] = [0x03, 0x03, 0x92, 0xAE, 0x72, 0x12, 0xE2, 0xDE, 0x5B, 0x5D, 0x4D, 0xE6, 0x87, 0xA3, 0xED, 0x85, 0x9A, 0x39, 0xCF, 0xC7, 0xDA, 0x74, 0xCB, 0x58, 0xCC, 0x2A, 0x3D, 0x38, 0x93, 0x21, 0x72, 0xC0, 0xD2, 0x91, 0x6E, 0x53, 0x6F, 0xA4, 0x29, 0x4A, 0x5C, 0x13, 0x20, 0xC6, 0xB9, 0xBF, 0xF6, 0xA8, ]
        let clientRandom:[UInt8] = [0xA9, 0x5D, 0xDF, 0x63, 0x90, 0x54, 0xB6, 0xF3, 0xEB, 0xD7, 0x2F, 0x83, 0x29, 0x70, 0x2E, 0x91, 0xF9, 0x5D, 0x6C, 0x84, 0xA3, 0xA7, 0x6C, 0x52, 0xCB, 0xA4, 0xAB, 0x24, 0x47, 0x16, 0xE6, 0x58, ]
        let serverRandom:[UInt8] = [0xA9, 0x5D, 0xDF, 0x63, 0xB3, 0x8B, 0xDD, 0x85, 0x6B, 0x65, 0xDD, 0x83, 0x36, 0x7D, 0x08, 0xB9, 0xED, 0xCB, 0xDF, 0xAE, 0xF6, 0x99, 0x5E, 0x49, 0x39, 0xB0, 0xFA, 0x4F, 0xC2, 0x81, 0xEF, 0x42, ]
        let readBulkKey:[UInt8] = [0x6F, 0xCD, 0x35, 0x60, 0xCA, 0x74, 0x2E, 0xC0, 0x83, 0x77, 0x00, 0x49, 0x20, 0xA0, 0x00, 0x5B, 0x0E, 0xDC, 0x33, 0x2A, 0x49, 0x7C, 0xAD, 0x0C, 0x73, 0xA4, 0x36, 0x3B, 0x39, 0x69, 0x63, 0x43, ]
        let readMacKey:[UInt8] = [0x8C, 0xBC, 0xAA, 0xAB, 0x44, 0xEE, 0x8B, 0xFC, 0xE2, 0x01, 0x2A, 0xE1, 0x70, 0xE1, 0x6D, 0xA8, 0x12, 0x15, 0x0A, 0x69, 0x1D, 0x74, 0x7E, 0xE7, 0x85, 0xE8, 0x02, 0xF9, 0x74, 0xA2, 0x94, 0xF8, ]
        let writeBulkKey:[UInt8] = [0x00, 0x39, 0x32, 0x86, 0xB9, 0xB1, 0x9C, 0x06, 0x76, 0x93, 0x61, 0xE7, 0xC4, 0x2E, 0xB3, 0xFA, 0xD0, 0x3E, 0x90, 0xA4, 0xB6, 0x56, 0x35, 0x45, 0xAA, 0xC6, 0xCC, 0xE9, 0xB1, 0x8E, 0x68, 0x8F, ]
        let writeMacKey:[UInt8] = [0x3C, 0xC7, 0x2F, 0x41, 0x5D, 0xC6, 0x88, 0x9C, 0xF3, 0xBA, 0xE0, 0x32, 0xAD, 0x59, 0x30, 0xEC, 0x39, 0xB4, 0x06, 0x25, 0xFE, 0x7B, 0xBC, 0x52, 0xC4, 0x26, 0xBC, 0x18, 0xB7, 0xB1, 0xEA, 0x0C, ]
        let clientVerifyData:[UInt8] = [0x14, 0x00, 0x00, 0x0C, 0x94, 0x1D, 0x0E, 0x5B, 0x42, 0x50, 0x39, 0x07, 0x14, 0x2D, 0x7F, 0x93, ]
        let serverVerifyData:[UInt8] = [0x14, 0x00, 0x00, 0x0C, 0x94, 0x1D, 0x0E, 0x5B, 0x42, 0x50, 0x39, 0x07, 0x14, 0x2D, 0x7F, 0x93, ]
        
        let clientIV = [UInt8](clientCipherData[0...15])
        
        let s = TLSSecurityParameters(.TLS_RSA_WITH_AES_256_CBC_SHA256)
        s.clientRandom = clientRandom
        s.serverRandom = serverRandom
        s.keyExchange(algorithm: .rsa, preMasterSecret: preMasterSecret)
        
        //验证加密结果是否相同
        let write = s.writeEncryptionParameters
        s.writeEncryptionParameters = s.readEncryptionParameters
        XCTAssertEqual(clientCipherData, s.encrypt(clientVerifyData, contentType: .handshake(.finished), iv: clientIV))
        
        let serverCipherData = s.encrypt(serverVerifyData, contentType: .handshake(.finished), iv: nil)
        
        let serverPlantData = try s.decrypt(serverCipherData ?? [], contentType: .handshake(.finished))
        XCTAssertEqual(serverPlantData, serverVerifyData)
    }
    
    func testAES_sha1() throws {
        let preMasterSecret: [UInt8] = [0x03, 0x03, 0xDE, 0xA9, 0x03, 0xF4, 0x66, 0xFD, 0xBC, 0xDF, 0x84, 0x82, 0x98, 0x48, 0x38, 0xC1, 0xB4, 0x75, 0x92, 0x40, 0xAC, 0x19, 0xAC, 0x1F, 0xD4, 0x28, 0xE8, 0x59, 0xBE, 0x13, 0x5F, 0x9A, 0x17, 0x17, 0xD9, 0x58, 0x0B, 0x9C, 0xD1, 0x6E, 0x43, 0x90, 0x61, 0xF9, 0x2C, 0xEB, 0xC4, 0xC1, ]

        let clientCipherData:[UInt8] = [0xC3, 0x44, 0xA3, 0xF3, 0x22, 0x9B, 0xA4, 0x61, 0x58, 0xB6, 0xBA, 0x1A, 0x97, 0x3A, 0x57, 0x96, 0x70, 0x6F, 0x9F, 0x66, 0xA2, 0x14, 0x52, 0xE3, 0x0F, 0x34, 0xE2, 0x9C, 0x52, 0xAE, 0x6D, 0x85, 0x7D, 0xCE, 0x08, 0xD8, 0x80, 0x71, 0xD3, 0xCD, 0x90, 0x7A, 0x17, 0xC1, 0x6E, 0xCB, 0x54, 0x58, 0xB2, 0x3A, 0x10, 0x23, 0x50, 0x25, 0x23, 0x9D, 0x5A, 0x79, 0xDF, 0x41, 0x42, 0x9C, 0x90, 0x7D, ]
        let masterSecret: [UInt8] = [0x5B, 0x27, 0xDB, 0x5B, 0xA6, 0xC8, 0x5D, 0x89, 0x52, 0x6E, 0x1E, 0x7B, 0xE3, 0x49, 0xC1, 0x67, 0x4F, 0x67, 0x1B, 0x57, 0xD2, 0x29, 0x68, 0x93, 0x98, 0xEA, 0xF7, 0x07, 0x57, 0x9C, 0x68, 0x60, 0xEF, 0x27, 0x6F, 0xEC, 0x89, 0xBC, 0x2B, 0x90, 0x6A, 0x89, 0x7D, 0x77, 0x62, 0x17, 0x25, 0xE0, ]
        let clientRandom: [UInt8] = [0x39, 0x5E, 0xCA, 0xE9, 0x75, 0x0F, 0xA3, 0xCE, 0x24, 0x60, 0x82, 0x5B, 0x70, 0xD5, 0xF0, 0xDC, 0x22, 0x09, 0xC3, 0x39, 0xAE, 0x59, 0xF0, 0xE3, 0x3A, 0x93, 0xE7, 0xDD, 0x2B, 0x1C, 0xA4, 0x14, ]
        let serverRandom: [UInt8] = [0x26, 0xD7, 0x67, 0xAA, 0xBB, 0x11, 0xE9, 0x2A, 0x4D, 0xF2, 0x5B, 0x53, 0xCF, 0x41, 0x4B, 0x56, 0xB8, 0x0B, 0x30, 0x7D, 0xD6, 0x59, 0x47, 0x01, 0x6A, 0x74, 0x7F, 0xA7, 0x9A, 0x21, 0x03, 0x2A, ]
        let clientVerify:[UInt8] = [0x14, 0x00, 0x00, 0x0C, 0x86, 0x74, 0xDC, 0xA3, 0x95, 0x4B, 0xD2, 0xA4, 0x45, 0xCE, 0xAE, 0x64, ]
        let handshakeData:[UInt8] = [0x01, 0x00, 0x01, 0xFC, 0x03, 0x03, 0x39, 0x5E, 0xCA, 0xE9, 0x75, 0x0F, 0xA3, 0xCE, 0x24, 0x60, 0x82, 0x5B, 0x70, 0xD5, 0xF0, 0xDC, 0x22, 0x09, 0xC3, 0x39, 0xAE, 0x59, 0xF0, 0xE3, 0x3A, 0x93, 0xE7, 0xDD, 0x2B, 0x1C, 0xA4, 0x14, 0x20, 0x19, 0x31, 0x14, 0x96, 0x7F, 0x4E, 0x72, 0x3A, 0xBD, 0x2F, 0x71, 0x37, 0xB9, 0xC8, 0xE6, 0xF4, 0xCF, 0xF0, 0xCD, 0x5E, 0x23, 0x0D, 0xFD, 0xE2, 0xBD, 0xC3, 0xA4, 0xBF, 0xAC, 0x04, 0x5D, 0xDD, 0x00, 0x20, 0xCA, 0xCA, 0x13, 0x01, 0x13, 0x02, 0x13, 0x03, 0xC0, 0x2B, 0xC0, 0x2F, 0xC0, 0x2C, 0xC0, 0x30, 0xCC, 0xA9, 0xCC, 0xA8, 0xC0, 0x13, 0xC0, 0x14, 0x00, 0x9C, 0x00, 0x9D, 0x00, 0x2F, 0x00, 0x35, 0x01, 0x00, 0x01, 0x93, 0x6A, 0x6A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x11, 0x00, 0x00, 0x0E, 0x62, 0x69, 0x6E, 0x61, 0x72, 0x79, 0x70, 0x61, 0x72, 0x61, 0x64, 0x69, 0x73, 0x65, 0x00, 0x17, 0x00, 0x00, 0xFF, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x08, 0x2A, 0x2A, 0x00, 0x1D, 0x00, 0x17, 0x00, 0x18, 0x00, 0x0B, 0x00, 0x02, 0x01, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x10, 0x00, 0x0E, 0x00, 0x0C, 0x02, 0x68, 0x32, 0x08, 0x68, 0x74, 0x74, 0x70, 0x2F, 0x31, 0x2E, 0x31, 0x00, 0x05, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x12, 0x00, 0x10, 0x04, 0x03, 0x08, 0x04, 0x04, 0x01, 0x05, 0x03, 0x08, 0x05, 0x05, 0x01, 0x08, 0x06, 0x06, 0x01, 0x00, 0x12, 0x00, 0x00, 0x00, 0x33, 0x00, 0x2B, 0x00, 0x29, 0x2A, 0x2A, 0x00, 0x01, 0x00, 0x00, 0x1D, 0x00, 0x20, 0xA9, 0x7D, 0x9A, 0x48, 0x58, 0x13, 0x57, 0x3F, 0x2B, 0xC3, 0x4A, 0xBA, 0xBD, 0xAD, 0x06, 0xE3, 0xB2, 0xBD, 0x63, 0xEF, 0x1A, 0x7B, 0xA5, 0xE9, 0xCC, 0x59, 0x2E, 0x84, 0x3D, 0x10, 0x35, 0x6C, 0x00, 0x2D, 0x00, 0x02, 0x01, 0x01, 0x00, 0x2B, 0x00, 0x0B, 0x0A, 0x8A, 0x8A, 0x03, 0x04, 0x03, 0x03, 0x03, 0x02, 0x03, 0x01, 0x00, 0x1B, 0x00, 0x03, 0x02, 0x00, 0x02, 0x44, 0x69, 0x00, 0x05, 0x00, 0x03, 0x02, 0x68, 0x32, 0x2A, 0x2A, 0x00, 0x01, 0x00, 0x00, 0x15, 0x00, 0xC5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x46, 0x03, 0x03, 0x26, 0xD7, 0x67, 0xAA, 0xBB, 0x11, 0xE9, 0x2A, 0x4D, 0xF2, 0x5B, 0x53, 0xCF, 0x41, 0x4B, 0x56, 0xB8, 0x0B, 0x30, 0x7D, 0xD6, 0x59, 0x47, 0x01, 0x6A, 0x74, 0x7F, 0xA7, 0x9A, 0x21, 0x03, 0x2A, 0x20, 0xAF, 0x12, 0xBD, 0xE2, 0xCC, 0x09, 0x99, 0x99, 0xA7, 0x0F, 0x6E, 0xFD, 0x11, 0x64, 0x0A, 0x50, 0x79, 0xFC, 0xE4, 0x62, 0x7B, 0xC2, 0x4E, 0xD0, 0xD7, 0x42, 0x03, 0x22, 0xA1, 0x13, 0x35, 0xEC, 0x00, 0x35, 0x00, 0x0B, 0x00, 0x04, 0x34, 0x00, 0x04, 0x31, 0x00, 0x04, 0x2E, 0x30, 0x82, 0x04, 0x2A, 0x30, 0x82, 0x03, 0x12, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x09, 0x00, 0x98, 0xF7, 0x33, 0xAD, 0x3A, 0xAE, 0x95, 0x73, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x30, 0x81, 0x82, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 0x4E, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0C, 0x02, 0x5A, 0x4A, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0C, 0x02, 0x48, 0x5A, 0x31, 0x1C, 0x30, 0x1A, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x13, 0x42, 0x69, 0x6E, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x64, 0x69, 0x73, 0x65, 0x2C, 0x20, 0x4C, 0x4C, 0x43, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x0E, 0x42, 0x69, 0x6E, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x64, 0x69, 0x73, 0x65, 0x31, 0x22, 0x30, 0x20, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x01, 0x16, 0x13, 0x7A, 0x68, 0x65, 0x67, 0x65, 0x62, 0x75, 0x6C, 0x61, 0x40, 0x67, 0x6D, 0x61, 0x69, 0x6C, 0x2E, 0x63, 0x6F, 0x6D, 0x30, 0x1E, 0x17, 0x0D, 0x32, 0x31, 0x30, 0x38, 0x31, 0x30, 0x30, 0x37, 0x34, 0x31, 0x31, 0x34, 0x5A, 0x17, 0x0D, 0x32, 0x32, 0x30, 0x38, 0x31, 0x30, 0x30, 0x37, 0x34, 0x31, 0x31, 0x34, 0x5A, 0x30, 0x81, 0x82, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 0x4E, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0C, 0x02, 0x5A, 0x4A, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0C, 0x02, 0x48, 0x5A, 0x31, 0x1C, 0x30, 0x1A, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x13, 0x42, 0x69, 0x6E, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x64, 0x69, 0x73, 0x65, 0x2C, 0x20, 0x4C, 0x4C, 0x43, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x0E, 0x42, 0x69, 0x6E, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x64, 0x69, 0x73, 0x65, 0x31, 0x22, 0x30, 0x20, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x01, 0x16, 0x13, 0x7A, 0x68, 0x65, 0x67, 0x65, 0x62, 0x75, 0x6C, 0x61, 0x40, 0x67, 0x6D, 0x61, 0x69, 0x6C, 0x2E, 0x63, 0x6F, 0x6D, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0F, 0x00, 0x30, 0x82, 0x01, 0x0A, 0x02, 0x82, 0x01, 0x01, 0x00, 0xC2, 0x5A, 0xC8, 0x2E, 0x04, 0x69, 0x1E, 0x3F, 0xA2, 0xF3, 0x8E, 0xC1, 0xC0, 0x3A, 0x2F, 0x67, 0x16, 0x00, 0x5B, 0x08, 0xC8, 0x7A, 0x37, 0x28, 0x82, 0x5A, 0x0B, 0x8F, 0x04, 0xB3, 0xDD, 0xF7, 0x9C, 0xB0, 0x76, 0xD0, 0xE6, 0xC1, 0xBE, 0x67, 0x8C, 0x28, 0xB7, 0x1E, 0x74, 0x39, 0xE7, 0xC4, 0xB4, 0xE2, 0x28, 0x66, 0x78, 0x79, 0x4F, 0xAF, 0xFB, 0x1C, 0xEF, 0x59, 0x23, 0x47, 0x90, 0xC8, 0x23, 0x4E, 0xC2, 0xB0, 0xC2, 0x98, 0x00, 0x80, 0x72, 0xB1, 0x28, 0xCB, 0x39, 0x3F, 0xD1, 0xDC, 0xAD, 0x17, 0x26, 0x0B, 0x3D, 0xC7, 0x51, 0x80, 0x2F, 0x9F, 0xA1, 0x24, 0x39, 0x06, 0x0A, 0x2B, 0xDD, 0x09, 0xA5, 0xC2, 0x88, 0xD1, 0x1F, 0x15, 0x0F, 0xE4, 0xA4, 0xE5, 0xF7, 0x47, 0x9F, 0xB5, 0x52, 0x3F, 0x1B, 0x20, 0x93, 0xB7, 0x31, 0xC8, 0x7B, 0x03, 0x90, 0x93, 0xA7, 0x2E, 0xF1, 0x6E, 0x28, 0xE7, 0x7D, 0x60, 0x60, 0x31, 0xAE, 0x53, 0x59, 0x6B, 0x55, 0xA1, 0xA2, 0xCA, 0xA4, 0x2C, 0x42, 0xB3, 0x59, 0xDF, 0xC1, 0xE8, 0x3B, 0xE2, 0x2F, 0xF9, 0x62, 0xB2, 0x06, 0x32, 0x52, 0x0B, 0x50, 0xD8, 0xA1, 0x87, 0xBE, 0xC3, 0x6B, 0x6B, 0x6B, 0x71, 0xFE, 0x3D, 0x64, 0x53, 0xB0, 0xD0, 0x9B, 0x1C, 0x30, 0x03, 0xCD, 0x7D, 0xFA, 0xB8, 0x6D, 0xA5, 0x0F, 0xF9, 0xAC, 0xA8, 0x2D, 0x3C, 0xB6, 0x5D, 0x46, 0xF7, 0x24, 0xCA, 0xD4, 0x9A, 0xE2, 0xE4, 0xC9, 0x41, 0xD7, 0xE0, 0x70, 0x1D, 0xC8, 0xF5, 0xDB, 0xBA, 0x5E, 0x28, 0x38, 0xE9, 0xAB, 0xBC, 0x9D, 0xAD, 0xCC, 0x42, 0xB5, 0xF9, 0x73, 0x16, 0xE7, 0x93, 0xAB, 0xFC, 0x29, 0x73, 0x70, 0xFB, 0x91, 0x4A, 0xC5, 0x6C, 0xE6, 0x5B, 0x6B, 0xC5, 0x8C, 0x3D, 0x19, 0xE3, 0xC4, 0x69, 0x65, 0xA9, 0x36, 0x42, 0xDF, 0x35, 0x25, 0x07, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3, 0x81, 0xA0, 0x30, 0x81, 0x9D, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 0x0E, 0x04, 0x16, 0x04, 0x14, 0x15, 0xF9, 0x8D, 0x85, 0x5F, 0xB1, 0xB2, 0xE3, 0x2A, 0x91, 0x4A, 0x16, 0xBE, 0x84, 0xFE, 0xD9, 0xF7, 0x8B, 0x84, 0x72, 0x30, 0x1F, 0x06, 0x03, 0x55, 0x1D, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x15, 0xF9, 0x8D, 0x85, 0x5F, 0xB1, 0xB2, 0xE3, 0x2A, 0x91, 0x4A, 0x16, 0xBE, 0x84, 0xFE, 0xD9, 0xF7, 0x8B, 0x84, 0x72, 0x30, 0x09, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0B, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x04, 0x04, 0x03, 0x02, 0x05, 0xA0, 0x30, 0x15, 0x06, 0x03, 0x55, 0x1D, 0x11, 0x04, 0x0E, 0x30, 0x0C, 0x82, 0x0A, 0x74, 0x65, 0x73, 0x74, 0x2E, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x30, 0x2C, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x86, 0xF8, 0x42, 0x01, 0x0D, 0x04, 0x1F, 0x16, 0x1D, 0x4F, 0x70, 0x65, 0x6E, 0x53, 0x53, 0x4C, 0x20, 0x47, 0x65, 0x6E, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x99, 0xBF, 0xDC, 0xAD, 0x9D, 0xA7, 0x5E, 0x4F, 0xB1, 0xFC, 0xFB, 0x3D, 0x26, 0xAF, 0x94, 0x4D, 0x15, 0x24, 0xF2, 0xE9, 0x38, 0xE9, 0xA6, 0xE8, 0x37, 0xAC, 0x9F, 0xBD, 0xB1, 0x51, 0x49, 0x73, 0x55, 0xB3, 0xBA, 0x8E, 0xCF, 0x6F, 0x16, 0x77, 0xC0, 0x1B, 0x9A, 0xB0, 0x36, 0x4D, 0xE8, 0xF5, 0x85, 0x82, 0x8B, 0x12, 0xBF, 0x19, 0x7B, 0x3D, 0x85, 0xF9, 0xEE, 0x7E, 0xE3, 0x39, 0x95, 0xC5, 0xD0, 0xF4, 0xFF, 0xAA, 0x84, 0x85, 0x67, 0x4C, 0x0D, 0xA0, 0x98, 0x1F, 0x39, 0x5A, 0x72, 0xDC, 0xA9, 0x43, 0x62, 0x53, 0x0E, 0x88, 0x26, 0x68, 0xBA, 0x4B, 0x33, 0x5F, 0x73, 0x85, 0x59, 0x73, 0xFF, 0xA7, 0xB5, 0xCF, 0x0A, 0xAC, 0x4B, 0x59, 0xA0, 0x21, 0xE3, 0xA9, 0x7D, 0xA6, 0x47, 0x85, 0xD5, 0x21, 0x69, 0xF7, 0x35, 0x72, 0x13, 0x38, 0x95, 0x0B, 0x9D, 0xC6, 0xC0, 0x47, 0x95, 0x83, 0x59, 0x61, 0x47, 0x26, 0x6D, 0xE6, 0x5A, 0xC9, 0xF9, 0x81, 0x08, 0x60, 0xE0, 0x80, 0x93, 0xE8, 0x3B, 0xBB, 0xEB, 0x1B, 0x2F, 0xBD, 0xFA, 0x8E, 0xC6, 0x8B, 0x1B, 0x75, 0xC0, 0x41, 0x9E, 0xDC, 0x5B, 0x04, 0x1A, 0x0D, 0x9A, 0xD0, 0x85, 0x19, 0x7E, 0xF1, 0x64, 0xD1, 0x6E, 0x97, 0x81, 0xCD, 0xEC, 0x24, 0x27, 0x35, 0x40, 0xB0, 0xB8, 0x00, 0x12, 0xA4, 0xBA, 0xC3, 0x46, 0x9F, 0x9C, 0x77, 0xE1, 0xE9, 0xE7, 0x2F, 0x69, 0xBD, 0x6B, 0xD9, 0x4A, 0x87, 0xE6, 0x22, 0x73, 0x7C, 0x0C, 0xE4, 0x19, 0xCA, 0x69, 0x92, 0xDF, 0x5B, 0x9F, 0x37, 0x9D, 0xBC, 0x55, 0xD7, 0x2E, 0x6A, 0xD8, 0xED, 0xE4, 0x28, 0x8F, 0xA6, 0x1C, 0x20, 0x05, 0xD0, 0x42, 0xCE, 0xA6, 0x28, 0x00, 0xFC, 0xEE, 0xE3, 0x0A, 0x27, 0xD7, 0x45, 0xB1, 0xC8, 0xCC, 0x0D, 0x6C, 0x1D, 0x8C, 0x07, 0xC6, 0x79, 0x24, 0x60, 0x0E, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x02, 0x01, 0x00, 0x17, 0xA4, 0xD3, 0xD7, 0x68, 0xF7, 0xB7, 0x91, 0x0E, 0x1C, 0xDF, 0xB8, 0x9F, 0x6C, 0x1B, 0xEC, 0x94, 0x85, 0x16, 0x53, 0x6B, 0x7E, 0x25, 0xD2, 0x50, 0xEF, 0xB1, 0xC3, 0x62, 0x80, 0xC5, 0x89, 0xA5, 0x69, 0x2C, 0xA3, 0xD9, 0x9C, 0xE7, 0xE1, 0x0F, 0x86, 0x78, 0x9E, 0xB0, 0x3D, 0xF6, 0x0F, 0xFB, 0x1F, 0x1F, 0x60, 0xE1, 0x00, 0xE0, 0xAB, 0x86, 0x48, 0x8F, 0xAE, 0xE6, 0x6F, 0x23, 0xA7, 0x5C, 0x7D, 0x08, 0x97, 0xB7, 0x5A, 0x0A, 0x27, 0xC5, 0x29, 0x52, 0xD3, 0x8E, 0xD2, 0xF5, 0x6B, 0x57, 0xFC, 0x8B, 0x93, 0xAB, 0x05, 0x67, 0x7C, 0xD2, 0x42, 0xB4, 0x88, 0x80, 0x4C, 0x03, 0xD2, 0xE7, 0xC5, 0xE3, 0x4C, 0x32, 0x88, 0x19, 0xD0, 0xED, 0x59, 0x15, 0x1F, 0x80, 0x93, 0x62, 0x01, 0x81, 0x2F, 0xE2, 0xB4, 0x1B, 0xC2, 0xB5, 0x9A, 0x80, 0x27, 0x5C, 0xF8, 0x06, 0x87, 0xDA, 0xC7, 0x4E, 0xAE, 0x55, 0x6E, 0x3A, 0xBD, 0xD6, 0x08, 0x47, 0x92, 0xB3, 0x9D, 0xBE, 0x06, 0x9B, 0x5A, 0x36, 0xE2, 0x28, 0x5E, 0x00, 0x60, 0xE6, 0x0D, 0x96, 0x6B, 0x80, 0x0D, 0x04, 0xCC, 0x78, 0x4E, 0x93, 0x18, 0x23, 0x35, 0xB6, 0xCA, 0x06, 0xE7, 0x49, 0x9F, 0xEC, 0x29, 0x24, 0x07, 0x49, 0xE2, 0x77, 0x34, 0x16, 0x46, 0xEB, 0x38, 0x47, 0x03, 0xA6, 0x13, 0xDC, 0x85, 0xA9, 0x17, 0x3C, 0xA5, 0x9D, 0xF7, 0x31, 0x1F, 0xED, 0xD0, 0x7E, 0x0F, 0x79, 0xD7, 0x56, 0xFB, 0x4B, 0xE2, 0xC7, 0x9D, 0xCD, 0xF1, 0x56, 0xC3, 0x1C, 0x23, 0x4E, 0xFA, 0x08, 0xA1, 0xF6, 0x18, 0x4D, 0xDD, 0xA3, 0xBC, 0xA7, 0xB7, 0x07, 0x51, 0xBF, 0xAE, 0xE9, 0x24, 0xE8, 0xA0, 0xCD, 0x22, 0xB6, 0xA8, 0x24, 0x50, 0x4F, 0x44, 0x5F, 0x7C, 0xA0, 0xFE, 0xDD, 0x9E, 0xDC, 0x35, 0x9D, 0x88, 0x39, 0x53, 0x1E, 0xFB, ] //false
        let transcriptHash0:[UInt8] = [0xB9, 0x5D, 0xB7, 0x38, 0xD6, 0xEB, 0xB7, 0x1E, 0x7E, 0x7E, 0x56, 0x7E, 0xE3, 0xB4, 0x87, 0x49, 0x91, 0x27, 0x10, 0xF9, 0x16, 0x7B, 0x85, 0xAD, 0xEC, 0xD5, 0x9B, 0xD0, 0x81, 0x47, 0xF8, 0xC8, ]
        let verifyData0:[UInt8] = [0x86, 0x74, 0xDC, 0xA3, 0x95, 0x4B, 0xD2, 0xA4, 0x45, 0xCE, 0xAE, 0x64, ]
        
        let s = TLSSecurityParameters(.TLS_RSA_WITH_AES_256_CBC_SHA)
        s.clientRandom = clientRandom
        s.serverRandom = serverRandom
        s.keyExchange(algorithm: .rsa, preMasterSecret: preMasterSecret)

        XCTAssertEqual(masterSecret, s.masterSecret)
        
        let transcriptHash1 = s.hashAlgorithm.hashFunction(handshakeData)
        XCTAssertEqual(transcriptHash0, transcriptHash1)
        
        let verifyData1 = s.PRF(secret: masterSecret, label: TLSClientFinishedLabel, seed: transcriptHash1, outputLength: 12)
        XCTAssertEqual(verifyData0, verifyData1)
        
        //验证加密结果是否相同
        let write = s.writeEncryptionParameters
        s.writeEncryptionParameters = s.readEncryptionParameters
        let decrypted = try s.decrypt(clientCipherData, contentType: .handshake(.finished))
        XCTAssertEqual(clientVerify, decrypted)
    }
    
    func testAES_CBC() throws {
        let preMasterSecret:[UInt8] = [0x03, 0x03, 0x91, 0xF4, 0x72, 0x83, 0x34, 0x48, 0xED, 0xBD, 0x3B, 0x17, 0x02, 0x00, 0xB1, 0x1A, 0xC7, 0x6C, 0x3E, 0x33, 0xF2, 0x8E, 0x10, 0xCC, 0x82, 0x5E, 0xE1, 0xA9, 0x58, 0xBD, 0x40, 0x6B, 0x0A, 0xC2, 0x21, 0xD5, 0xEC, 0xCB, 0x72, 0x9B, 0xB9, 0xB3, 0x28, 0xE8, 0x90, 0x89, 0x8C, 0x21, ]
        let clientRandom:[UInt8] = [0x0A, 0x6C, 0x8A, 0xE7, 0xBE, 0xED, 0xEC, 0x76, 0xB8, 0x50, 0xED, 0x7F, 0x8A, 0xC4, 0x26, 0xA0, 0x5A, 0x92, 0xDA, 0x31, 0x9E, 0x82, 0xFD, 0x5B, 0x25, 0xCB, 0xC1, 0x7E, 0x50, 0x24, 0xCA, 0x21, ]
        let serverRandom:[UInt8] = [0x26, 0xEF, 0x3C, 0x1D, 0x7A, 0x4C, 0x25, 0x87, 0x38, 0x6B, 0xD4, 0x6F, 0x0E, 0xCC, 0xD1, 0x2E, 0xC3, 0xA5, 0xC2, 0x40, 0xD8, 0xA1, 0x99, 0x1E, 0xB8, 0x0C, 0x0B, 0x94, 0xDC, 0x6E, 0x0E, 0x53, ]
        let readBulkKey:[UInt8] = [0x28, 0xA5, 0xA9, 0x90, 0x41, 0xC6, 0x5D, 0xC8, 0x99, 0x4F, 0x8A, 0xF3, 0x1C, 0x28, 0xD0, 0x12, 0x64, 0x22, 0x5A, 0x68, 0xB2, 0x5C, 0x35, 0xE4, 0xB8, 0x1F, 0x10, 0x24, 0x83, 0x81, 0x2A, 0xF2, ]
        let readMacKey:[UInt8] = [0xE9, 0x52, 0x75, 0xFA, 0x95, 0x74, 0x67, 0x29, 0xD3, 0xC3, 0x75, 0xA5, 0xF6, 0xAC, 0x2B, 0xE1, 0xEE, 0x2C, 0xD6, 0xEA, 0xD4, 0xAF, 0x80, 0x98, 0x7D, 0x00, 0x90, 0xAF, 0x6E, 0xC5, 0x85, 0xAA, ]
        let writeBulkKey:[UInt8] = [0x09, 0x3A, 0x5F, 0x8F, 0xE5, 0x28, 0xAF, 0x1C, 0xBA, 0x1E, 0x3F, 0x97, 0xE3, 0xCE, 0xBA, 0x17, 0x63, 0x1F, 0xEB, 0x1C, 0xC8, 0x01, 0x98, 0xA4, 0x20, 0x2D, 0xF3, 0x55, 0xB6, 0x58, 0x1E, 0xCA, ]
        let writeMacKey:[UInt8] = [0xC8, 0xB0, 0x3E, 0xC9, 0x39, 0xDB, 0x3F, 0xA8, 0xE6, 0x45, 0x3F, 0x4D, 0x53, 0xDC, 0x46, 0x64, 0x71, 0xD3, 0xE0, 0xA9, 0x8E, 0x4C, 0xC1, 0x60, 0x29, 0x15, 0x24, 0xE4, 0x16, 0x2C, 0xAC, 0x15, ]
        let clientVerifyData:[UInt8] = [0x14, 0x00, 0x00, 0x0C, 0x45, 0xD9, 0x57, 0x1D, 0xC5, 0xCA, 0x0F, 0x48, 0x83, 0x11, 0xB2, 0x8A, ]
        let serverVerifyData:[UInt8] = [0x14, 0x00, 0x00, 0x0C, 0x7D, 0x88, 0xE8, 0xF8, 0x2A, 0x64, 0x0B, 0x48, 0xA5, 0x8A, 0xB0, 0x30, ]
        let cipherData: [UInt8] = "e56c73d174a595572686b4608d7c6ca691cd26e71754458f3ef1f7b904cac16a67c882209098908bc9945657d46050f8d25563641225de70328d8a56125f5eb07e1988b86222e9aeda953693dd1e7810".uint8Array
        
        let s = TLSSecurityParameters(.TLS_RSA_WITH_AES_256_CBC_SHA256)
        s.clientRandom = clientRandom
        s.serverRandom = serverRandom
        s.keyExchange(algorithm: .rsa, preMasterSecret: preMasterSecret)

        XCTAssertEqual(readBulkKey, s.readEncryptionParameters.bulkKey)
        
        let iv = Array(cipherData[0..<s.recordIVLength])
        
        let decrypted = try s.decrypt(cipherData, contentType: .handshake(.finished))
        
        XCTAssertEqual(decrypted, clientVerifyData)
        
        s.writeEncryptionParameters = s.readEncryptionParameters
        s.writeEncryptionParameters.sequenceNumber = 0
        let encrypted = s.encrypt(clientVerifyData, contentType: .handshake(.finished), iv: iv)
        XCTAssertEqual(encrypted, cipherData)

    }
    
    func testAESEncryptGCM() throws {
        let preMasterSecret:[UInt8] = [0x03, 0x03, 0x58, 0x03, 0x49, 0x68, 0xDE, 0x9E, 0x4D, 0x27, 0xE3, 0xE7, 0x13, 0x26, 0xA2, 0x58, 0x19, 0xF8, 0xB7, 0xF9, 0xEC, 0xF0, 0x24, 0x1A, 0x7B, 0x85, 0x09, 0x06, 0x19, 0x58, 0x9D, 0x64, 0x39, 0x16, 0x97, 0x75, 0x6C, 0xC2, 0x10, 0xC6, 0x77, 0x26, 0x08, 0x21, 0x13, 0x01, 0xD1, 0x5D, ]
        let clientRandom:[UInt8] = [0x91, 0xB6, 0xA0, 0x00, 0xB8, 0x4D, 0x5D, 0x9C, 0x45, 0x08, 0xB3, 0xAC, 0xB2, 0x82, 0xC0, 0x3C, 0x68, 0x72, 0x34, 0x82, 0x9B, 0x7B, 0xB0, 0x9D, 0x27, 0xB3, 0xA5, 0xA7, 0xC3, 0xCA, 0x22, 0x09, ]
        let serverRandom:[UInt8] = [0x26, 0xEF, 0x3E, 0xDB, 0x03, 0x86, 0x62, 0x9B, 0x87, 0xC9, 0xAD, 0x17, 0x8A, 0x27, 0x54, 0xA7, 0xC8, 0xA3, 0xB5, 0x68, 0x75, 0x6C, 0xC6, 0x76, 0x9D, 0xEE, 0x6A, 0xE8, 0x33, 0xFA, 0x24, 0x65, ]
        let readBulkKey:[UInt8] = [0x46, 0x7E, 0x20, 0x02, 0x34, 0xC5, 0xD3, 0xB4, 0x6B, 0x22, 0x80, 0x24, 0xBA, 0xFA, 0x68, 0xFE, ]
        let readMacKey:[UInt8] = []
        let writeBulkKey:[UInt8] = [0xF2, 0x45, 0x27, 0x3E, 0x8E, 0xE7, 0x59, 0xB7, 0x81, 0x54, 0x68, 0x73, 0xA4, 0xD9, 0x8B, 0x7A, ]
        let writeMacKey:[UInt8] = []
        let clientVerifyData:[UInt8] = [0x14, 0x00, 0x00, 0x0C, 0x83, 0xE4, 0xD0, 0x71, 0x10, 0x8A, 0x3A, 0x8C, 0x44, 0xBD, 0x4B, 0xFB, ]
        let serverVerifyData:[UInt8] = [0x14, 0x00, 0x00, 0x0C, 0xAF, 0x20, 0x53, 0xB0, 0x87, 0xEB, 0x4F, 0xEB, 0x70, 0x5E, 0xC7, 0x30, ]
        
        let cipherData: [UInt8] = "000000000000000263a1edb8ac1409cc4c6e442c19cb2ccda6ed".uint8Array
                
        let s = TLSSecurityParameters(.TLS_RSA_WITH_AES_128_GCM_SHA256)
        s.clientRandom = clientRandom
        s.serverRandom = serverRandom
        s.keyExchange(algorithm: .rsa, preMasterSecret: preMasterSecret)
        
        XCTAssertEqual(s.readEncryptionParameters.bulkKey, readBulkKey)

        s.readEncryptionParameters.sequenceNumber = 2
        let decrypted = try s.decrypt(cipherData, contentType: .handshake(.finished))
        XCTAssertEqual(decrypted, [20,0,0,12])
        
        s.writeEncryptionParameters = s.readEncryptionParameters
        s.writeEncryptionParameters.sequenceNumber = 1
        
        let recordIV = [UInt8](cipherData[0..<s.recordIVLength])
        
        let encrypted = s.encrypt(decrypted ?? [], contentType: .handshake(.finished), iv: recordIV)
        XCTAssertEqual(encrypted, cipherData)
    }
}

