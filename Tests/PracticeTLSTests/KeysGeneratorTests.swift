//
//  KeysGeneratorTests.swift
//  
//
//  Created by Rake Yang on 2021/8/23.
//

import Foundation

import XCTest
import Foundation
import CryptoSwift
@testable import PracticeTLS

class KeysGeneratorTests: XCTestCase {
    func testMasterKey() throws {
        let preMasterSecret:[UInt8] = [0x03, 0x03, 0x3f, 0xbf, 0x51, 0x53, 0xbe, 0x71, 0x00, 0x79, 0x1a, 0x11, 0x39, 0x60, 0x7b, 0x3d, 0xdb, 0x92, 0x60, 0xbc, 0xc4, 0xa0, 0x4a, 0x96, 0xa8, 0x70, 0xab, 0x54, 0x06, 0x23, 0x10, 0x63, 0xdb, 0xea, 0xd3, 0x46, 0xe6, 0xa1, 0xa7, 0xab, 0xac, 0x3d, 0x13, 0x9b, 0x76, 0x6b, 0x0a, 0x65, ]
        let cipherData:[UInt8] = [0x9f, 0x9e, 0xaf, 0xd6, 0xf7, 0xd1, 0xad, 0x90, 0xa7, 0x2f, 0x59, 0xdc, 0xa9, 0xbf, 0x06, 0x85, 0xce, 0xde, 0x9f, 0xae, 0xa1, 0x95, 0x23, 0xe3, 0xbd, 0x10, 0xdb, 0xed, 0xa0, 0x6b, 0x47, 0x35, 0x58, 0xc1, 0xb1, 0x36, 0x6b, 0xbb, 0xb5, 0x02, 0x43, 0x62, 0x44, 0xcf, 0x3d, 0x59, 0xf3, 0x91, 0xf0, 0x1b, 0xbe, 0xbd, 0x68, 0xaf, 0x43, 0xe9, 0xb4, 0xf6, 0x1d, 0xc2, 0x7a, 0xde, 0xae, 0x0a, 0x8a, 0xd3, 0xec, 0xe6, 0x7e, 0x73, 0xbb, 0xb4, 0xde, 0xd9, 0x0c, 0x3f, 0x5b, 0x9b, 0xca, 0x25, ]
        let clientRandom:[UInt8] = [0x1b, 0x94, 0x1f, 0x91, 0x29, 0x77, 0x64, 0xed, 0xb2, 0x62, 0x30, 0xa8, 0x21, 0xf4, 0x9f, 0x2f, 0x14, 0x7f, 0x62, 0x83, 0xda, 0x4b, 0x34, 0x07, 0x46, 0xec, 0x59, 0x0d, 0x5c, 0x53, 0xb3, 0x31, ]
        let serverRandom:[UInt8] = [0x26, 0xd4, 0x91, 0xa7, 0x9e, 0x5a, 0x32, 0x32, 0x52, 0x5d, 0x74, 0xb9, 0x9c, 0x96, 0x7f, 0xf9, 0x89, 0x47, 0x6a, 0xc1, 0xae, 0x35, 0x37, 0xba, 0xb1, 0x54, 0x4e, 0xfe, 0x1d, 0x58, 0xe8, 0x08, ]
        let bulkKey:[UInt8] = [0x26, 0xd1, 0x3a, 0xc0, 0xb0, 0x6a, 0x57, 0x6f, 0x23, 0x94, 0xab, 0xad, 0x5d, 0x57, 0x83, 0xa3, 0x14, 0xf2, 0x93, 0x59, 0x36, 0xd7, 0x53, 0xc3, 0x52, 0xa3, 0x92, 0x74, 0x48, 0x2e, 0x31, 0x26, ]
        let IV:[UInt8] = [0x9f, 0x9e, 0xaf, 0xd6, 0xf7, 0xd1, 0xad, 0x90, 0xa7, 0x2f, 0x59, 0xdc, 0xa9, 0xbf, 0x06, 0x85, ]
        
        let s = TLSSecurityParameters()
        s.clientRandom = clientRandom
        s.serverRandom = serverRandom
        s.preMasterSecret = preMasterSecret
        s.transformParamters()
        
        XCTAssertEqual(s.read!.bulkKey, bulkKey)
        
        let nIV = [UInt8](cipherData[0..<s.recordIVLength])
        XCTAssertEqual(IV, nIV)

        let aes = try CryptoSwift.AES(key: s.read!.bulkKey, blockMode: CBC(iv: nIV), padding: .noPadding)
        let decrypted = try aes.decrypt(cipherData[s.recordIVLength...])
        XCTAssertEqual(decrypted.first, 20)
    }
    
    func testFinishedMessage() throws {
        let preMasterSecret:[UInt8] = [0x03, 0x03, 0x93, 0xE6, 0x1E, 0x17, 0x2B, 0x7E, 0xB8, 0x6C, 0x1A, 0xC1, 0xD5, 0x15, 0x17, 0x1D, 0x99, 0x72, 0xAB, 0x82, 0x58, 0xC6, 0x42, 0xF6, 0x29, 0x92, 0xA3, 0x55, 0x39, 0x8C, 0xAB, 0x4F, 0x01, 0xC1, 0x8F, 0x54, 0x3D, 0xDC, 0xB3, 0x01, 0x03, 0x81, 0xA0, 0x3E, 0x1B, 0x2D, 0xD1, 0xEA, ]
        let masterSecret:[UInt8] = [0x6F, 0x39, 0xD9, 0xF6, 0xAF, 0x35, 0x6D, 0x1F, 0x5E, 0x64, 0xFB, 0x3C, 0x7A, 0xA3, 0x51, 0x7F, 0x79, 0x1A, 0xE4, 0xC8, 0xF1, 0xBC, 0x41, 0xEF, 0x6D, 0x9C, 0xA6, 0x6D, 0x78, 0x09, 0x8B, 0x47, 0x18, 0x65, 0x63, 0xB0, 0xFF, 0x2F, 0x83, 0x46, 0x0D, 0x96, 0xEF, 0x84, 0x73, 0xD6, 0x61, 0xB4, ]
        let cipherData:[UInt8] = [0x30, 0x46, 0xCC, 0x95, 0x5C, 0xDF, 0x4F, 0xFF, 0x3D, 0x57, 0x9B, 0x22, 0xC1, 0x32, 0x35, 0x99, 0xE3, 0x8D, 0x64, 0xEF, 0x77, 0x4E, 0x8E, 0x8D, 0x4C, 0x56, 0x4A, 0x6E, 0x77, 0x33, 0x86, 0x0D, 0x51, 0x40, 0x6C, 0x4E, 0xA7, 0x30, 0x98, 0x89, 0x8F, 0x4A, 0xAD, 0xEE, 0xAC, 0x30, 0xED, 0xE9, 0x05, 0xBD, 0x4F, 0x59, 0x1C, 0xCC, 0xC0, 0xB2, 0x32, 0xDB, 0x3E, 0x9A, 0xC7, 0xEF, 0x34, 0x06, 0x6A, 0xF8, 0xA8, 0xA2, 0xB5, 0x41, 0x70, 0xAE, 0x72, 0xF0, 0x07, 0x83, 0x8F, 0x8D, 0xB1, 0x0B, ]
        let clientRandom:[UInt8] = [0x77, 0xF5, 0x9D, 0x85, 0xDA, 0xE9, 0x3A, 0x6F, 0xFD, 0x3F, 0xC8, 0x14, 0x36, 0x63, 0x30, 0x9E, 0x6A, 0x60, 0x43, 0x0E, 0xF1, 0xFC, 0x77, 0xFC, 0x8C, 0x6E, 0xF3, 0x14, 0xCC, 0x48, 0x32, 0xFE, ]
        let serverRandom:[UInt8] = [0x26, 0xD4, 0xF2, 0x61, 0x49, 0x2C, 0x5A, 0xA0, 0x21, 0x00, 0x3C, 0xF7, 0xB1, 0x72, 0xDE, 0x39, 0x3F, 0x9E, 0xCC, 0xDC, 0x07, 0xB2, 0x93, 0x64, 0x2C, 0x20, 0x65, 0xF4, 0x44, 0x30, 0x6B, 0x07, ]
        let readBulkKey:[UInt8] = [0x78, 0x52, 0x7D, 0x25, 0xD6, 0xEB, 0x77, 0x5F, 0x69, 0x39, 0x09, 0xEB, 0x46, 0x22, 0x19, 0x55, 0x98, 0xF7, 0x6E, 0x5B, 0xE9, 0x78, 0x60, 0xA1, 0x0B, 0x38, 0x2C, 0xCB, 0x9A, 0x37, 0x13, 0x20, ]
        let readIV:[UInt8] = [0x30, 0x46, 0xCC, 0x95, 0x5C, 0xDF, 0x4F, 0xFF, 0x3D, 0x57, 0x9B, 0x22, 0xC1, 0x32, 0x35, 0x99, ]

        let handshakeData:[UInt8] = [0x01, 0x00, 0x00, 0xDD, 0x03, 0x03, 0x77, 0xF5, 0x9D, 0x85, 0xDA, 0xE9, 0x3A, 0x6F, 0xFD, 0x3F, 0xC8, 0x14, 0x36, 0x63, 0x30, 0x9E, 0x6A, 0x60, 0x43, 0x0E, 0xF1, 0xFC, 0x77, 0xFC, 0x8C, 0x6E, 0xF3, 0x14, 0xCC, 0x48, 0x32, 0xFE, 0x00, 0x00, 0x28, 0xC0, 0x2C, 0xC0, 0x2B, 0xC0, 0x24, 0xC0, 0x23, 0xC0, 0x0A, 0xC0, 0x09, 0xCC, 0xA9, 0xC0, 0x30, 0xC0, 0x2F, 0xC0, 0x28, 0xC0, 0x27, 0xC0, 0x14, 0xC0, 0x13, 0xCC, 0xA8, 0x00, 0x9D, 0x00, 0x9C, 0x00, 0x3D, 0x00, 0x3C, 0x00, 0x35, 0x00, 0x2F, 0x01, 0x00, 0x00, 0x8C, 0xFF, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x0E, 0x00, 0x00, 0x0B, 0x31, 0x39, 0x32, 0x2E, 0x31, 0x36, 0x38, 0x2E, 0x32, 0x2E, 0x31, 0x00, 0x17, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x14, 0x00, 0x12, 0x04, 0x03, 0x08, 0x04, 0x04, 0x01, 0x05, 0x03, 0x08, 0x05, 0x05, 0x01, 0x08, 0x06, 0x06, 0x01, 0x02, 0x01, 0x00, 0x05, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x33, 0x74, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x10, 0x00, 0x30, 0x00, 0x2E, 0x02, 0x68, 0x32, 0x05, 0x68, 0x32, 0x2D, 0x31, 0x36, 0x05, 0x68, 0x32, 0x2D, 0x31, 0x35, 0x05, 0x68, 0x32, 0x2D, 0x31, 0x34, 0x08, 0x73, 0x70, 0x64, 0x79, 0x2F, 0x33, 0x2E, 0x31, 0x06, 0x73, 0x70, 0x64, 0x79, 0x2F, 0x33, 0x08, 0x68, 0x74, 0x74, 0x70, 0x2F, 0x31, 0x2E, 0x31, 0x00, 0x0B, 0x00, 0x02, 0x01, 0x00, 0x00, 0x0A, 0x00, 0x08, 0x00, 0x06, 0x00, 0x1D, 0x00, 0x17, 0x00, 0x18, 0x02, 0x00, 0x00, 0x46, 0x03, 0x03, 0x26, 0xD4, 0xF2, 0x61, 0x49, 0x2C, 0x5A, 0xA0, 0x21, 0x00, 0x3C, 0xF7, 0xB1, 0x72, 0xDE, 0x39, 0x3F, 0x9E, 0xCC, 0xDC, 0x07, 0xB2, 0x93, 0x64, 0x2C, 0x20, 0x65, 0xF4, 0x44, 0x30, 0x6B, 0x07, 0x20, 0x4C, 0x1B, 0x5F, 0x4E, 0x46, 0x4E, 0x7C, 0xE9, 0x84, 0x50, 0x6D, 0x25, 0x01, 0x0A, 0x43, 0x38, 0x98, 0xEF, 0x7D, 0x67, 0x61, 0x78, 0x01, 0xB4, 0x3B, 0xAF, 0xDC, 0x36, 0x3E, 0x45, 0x34, 0x63, 0x00, 0x3D, 0x00, 0x0B, 0x00, 0x04, 0x34, 0x00, 0x04, 0x31, 0x00, 0x04, 0x2E, 0x30, 0x82, 0x04, 0x2A, 0x30, 0x82, 0x03, 0x12, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x09, 0x00, 0x98, 0xF7, 0x33, 0xAD, 0x3A, 0xAE, 0x95, 0x73, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x30, 0x81, 0x82, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 0x4E, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0C, 0x02, 0x5A, 0x4A, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0C, 0x02, 0x48, 0x5A, 0x31, 0x1C, 0x30, 0x1A, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x13, 0x42, 0x69, 0x6E, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x64, 0x69, 0x73, 0x65, 0x2C, 0x20, 0x4C, 0x4C, 0x43, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x0E, 0x42, 0x69, 0x6E, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x64, 0x69, 0x73, 0x65, 0x31, 0x22, 0x30, 0x20, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x01, 0x16, 0x13, 0x7A, 0x68, 0x65, 0x67, 0x65, 0x62, 0x75, 0x6C, 0x61, 0x40, 0x67, 0x6D, 0x61, 0x69, 0x6C, 0x2E, 0x63, 0x6F, 0x6D, 0x30, 0x1E, 0x17, 0x0D, 0x32, 0x31, 0x30, 0x38, 0x31, 0x30, 0x30, 0x37, 0x34, 0x31, 0x31, 0x34, 0x5A, 0x17, 0x0D, 0x32, 0x32, 0x30, 0x38, 0x31, 0x30, 0x30, 0x37, 0x34, 0x31, 0x31, 0x34, 0x5A, 0x30, 0x81, 0x82, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 0x4E, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0C, 0x02, 0x5A, 0x4A, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0C, 0x02, 0x48, 0x5A, 0x31, 0x1C, 0x30, 0x1A, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x13, 0x42, 0x69, 0x6E, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x64, 0x69, 0x73, 0x65, 0x2C, 0x20, 0x4C, 0x4C, 0x43, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x0E, 0x42, 0x69, 0x6E, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x64, 0x69, 0x73, 0x65, 0x31, 0x22, 0x30, 0x20, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x01, 0x16, 0x13, 0x7A, 0x68, 0x65, 0x67, 0x65, 0x62, 0x75, 0x6C, 0x61, 0x40, 0x67, 0x6D, 0x61, 0x69, 0x6C, 0x2E, 0x63, 0x6F, 0x6D, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0F, 0x00, 0x30, 0x82, 0x01, 0x0A, 0x02, 0x82, 0x01, 0x01, 0x00, 0xC2, 0x5A, 0xC8, 0x2E, 0x04, 0x69, 0x1E, 0x3F, 0xA2, 0xF3, 0x8E, 0xC1, 0xC0, 0x3A, 0x2F, 0x67, 0x16, 0x00, 0x5B, 0x08, 0xC8, 0x7A, 0x37, 0x28, 0x82, 0x5A, 0x0B, 0x8F, 0x04, 0xB3, 0xDD, 0xF7, 0x9C, 0xB0, 0x76, 0xD0, 0xE6, 0xC1, 0xBE, 0x67, 0x8C, 0x28, 0xB7, 0x1E, 0x74, 0x39, 0xE7, 0xC4, 0xB4, 0xE2, 0x28, 0x66, 0x78, 0x79, 0x4F, 0xAF, 0xFB, 0x1C, 0xEF, 0x59, 0x23, 0x47, 0x90, 0xC8, 0x23, 0x4E, 0xC2, 0xB0, 0xC2, 0x98, 0x00, 0x80, 0x72, 0xB1, 0x28, 0xCB, 0x39, 0x3F, 0xD1, 0xDC, 0xAD, 0x17, 0x26, 0x0B, 0x3D, 0xC7, 0x51, 0x80, 0x2F, 0x9F, 0xA1, 0x24, 0x39, 0x06, 0x0A, 0x2B, 0xDD, 0x09, 0xA5, 0xC2, 0x88, 0xD1, 0x1F, 0x15, 0x0F, 0xE4, 0xA4, 0xE5, 0xF7, 0x47, 0x9F, 0xB5, 0x52, 0x3F, 0x1B, 0x20, 0x93, 0xB7, 0x31, 0xC8, 0x7B, 0x03, 0x90, 0x93, 0xA7, 0x2E, 0xF1, 0x6E, 0x28, 0xE7, 0x7D, 0x60, 0x60, 0x31, 0xAE, 0x53, 0x59, 0x6B, 0x55, 0xA1, 0xA2, 0xCA, 0xA4, 0x2C, 0x42, 0xB3, 0x59, 0xDF, 0xC1, 0xE8, 0x3B, 0xE2, 0x2F, 0xF9, 0x62, 0xB2, 0x06, 0x32, 0x52, 0x0B, 0x50, 0xD8, 0xA1, 0x87, 0xBE, 0xC3, 0x6B, 0x6B, 0x6B, 0x71, 0xFE, 0x3D, 0x64, 0x53, 0xB0, 0xD0, 0x9B, 0x1C, 0x30, 0x03, 0xCD, 0x7D, 0xFA, 0xB8, 0x6D, 0xA5, 0x0F, 0xF9, 0xAC, 0xA8, 0x2D, 0x3C, 0xB6, 0x5D, 0x46, 0xF7, 0x24, 0xCA, 0xD4, 0x9A, 0xE2, 0xE4, 0xC9, 0x41, 0xD7, 0xE0, 0x70, 0x1D, 0xC8, 0xF5, 0xDB, 0xBA, 0x5E, 0x28, 0x38, 0xE9, 0xAB, 0xBC, 0x9D, 0xAD, 0xCC, 0x42, 0xB5, 0xF9, 0x73, 0x16, 0xE7, 0x93, 0xAB, 0xFC, 0x29, 0x73, 0x70, 0xFB, 0x91, 0x4A, 0xC5, 0x6C, 0xE6, 0x5B, 0x6B, 0xC5, 0x8C, 0x3D, 0x19, 0xE3, 0xC4, 0x69, 0x65, 0xA9, 0x36, 0x42, 0xDF, 0x35, 0x25, 0x07, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3, 0x81, 0xA0, 0x30, 0x81, 0x9D, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 0x0E, 0x04, 0x16, 0x04, 0x14, 0x15, 0xF9, 0x8D, 0x85, 0x5F, 0xB1, 0xB2, 0xE3, 0x2A, 0x91, 0x4A, 0x16, 0xBE, 0x84, 0xFE, 0xD9, 0xF7, 0x8B, 0x84, 0x72, 0x30, 0x1F, 0x06, 0x03, 0x55, 0x1D, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x15, 0xF9, 0x8D, 0x85, 0x5F, 0xB1, 0xB2, 0xE3, 0x2A, 0x91, 0x4A, 0x16, 0xBE, 0x84, 0xFE, 0xD9, 0xF7, 0x8B, 0x84, 0x72, 0x30, 0x09, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0B, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x04, 0x04, 0x03, 0x02, 0x05, 0xA0, 0x30, 0x15, 0x06, 0x03, 0x55, 0x1D, 0x11, 0x04, 0x0E, 0x30, 0x0C, 0x82, 0x0A, 0x74, 0x65, 0x73, 0x74, 0x2E, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x30, 0x2C, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x86, 0xF8, 0x42, 0x01, 0x0D, 0x04, 0x1F, 0x16, 0x1D, 0x4F, 0x70, 0x65, 0x6E, 0x53, 0x53, 0x4C, 0x20, 0x47, 0x65, 0x6E, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x99, 0xBF, 0xDC, 0xAD, 0x9D, 0xA7, 0x5E, 0x4F, 0xB1, 0xFC, 0xFB, 0x3D, 0x26, 0xAF, 0x94, 0x4D, 0x15, 0x24, 0xF2, 0xE9, 0x38, 0xE9, 0xA6, 0xE8, 0x37, 0xAC, 0x9F, 0xBD, 0xB1, 0x51, 0x49, 0x73, 0x55, 0xB3, 0xBA, 0x8E, 0xCF, 0x6F, 0x16, 0x77, 0xC0, 0x1B, 0x9A, 0xB0, 0x36, 0x4D, 0xE8, 0xF5, 0x85, 0x82, 0x8B, 0x12, 0xBF, 0x19, 0x7B, 0x3D, 0x85, 0xF9, 0xEE, 0x7E, 0xE3, 0x39, 0x95, 0xC5, 0xD0, 0xF4, 0xFF, 0xAA, 0x84, 0x85, 0x67, 0x4C, 0x0D, 0xA0, 0x98, 0x1F, 0x39, 0x5A, 0x72, 0xDC, 0xA9, 0x43, 0x62, 0x53, 0x0E, 0x88, 0x26, 0x68, 0xBA, 0x4B, 0x33, 0x5F, 0x73, 0x85, 0x59, 0x73, 0xFF, 0xA7, 0xB5, 0xCF, 0x0A, 0xAC, 0x4B, 0x59, 0xA0, 0x21, 0xE3, 0xA9, 0x7D, 0xA6, 0x47, 0x85, 0xD5, 0x21, 0x69, 0xF7, 0x35, 0x72, 0x13, 0x38, 0x95, 0x0B, 0x9D, 0xC6, 0xC0, 0x47, 0x95, 0x83, 0x59, 0x61, 0x47, 0x26, 0x6D, 0xE6, 0x5A, 0xC9, 0xF9, 0x81, 0x08, 0x60, 0xE0, 0x80, 0x93, 0xE8, 0x3B, 0xBB, 0xEB, 0x1B, 0x2F, 0xBD, 0xFA, 0x8E, 0xC6, 0x8B, 0x1B, 0x75, 0xC0, 0x41, 0x9E, 0xDC, 0x5B, 0x04, 0x1A, 0x0D, 0x9A, 0xD0, 0x85, 0x19, 0x7E, 0xF1, 0x64, 0xD1, 0x6E, 0x97, 0x81, 0xCD, 0xEC, 0x24, 0x27, 0x35, 0x40, 0xB0, 0xB8, 0x00, 0x12, 0xA4, 0xBA, 0xC3, 0x46, 0x9F, 0x9C, 0x77, 0xE1, 0xE9, 0xE7, 0x2F, 0x69, 0xBD, 0x6B, 0xD9, 0x4A, 0x87, 0xE6, 0x22, 0x73, 0x7C, 0x0C, 0xE4, 0x19, 0xCA, 0x69, 0x92, 0xDF, 0x5B, 0x9F, 0x37, 0x9D, 0xBC, 0x55, 0xD7, 0x2E, 0x6A, 0xD8, 0xED, 0xE4, 0x28, 0x8F, 0xA6, 0x1C, 0x20, 0x05, 0xD0, 0x42, 0xCE, 0xA6, 0x28, 0x00, 0xFC, 0xEE, 0xE3, 0x0A, 0x27, 0xD7, 0x45, 0xB1, 0xC8, 0xCC, 0x0D, 0x6C, 0x1D, 0x8C, 0x07, 0xC6, 0x79, 0x24, 0x60, 0x0E, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x02, 0x01, 0x00, 0x2A, 0xCB, 0x29, 0x83, 0x71, 0xD9, 0x23, 0x3E, 0x92, 0x48, 0x5D, 0x42, 0x4F, 0x69, 0x3B, 0xDA, 0xFE, 0xA8, 0x83, 0xA9, 0xD1, 0x6D, 0x98, 0xBB, 0xE3, 0xBD, 0xAE, 0x9D, 0x67, 0x15, 0x47, 0xF7, 0x35, 0x1B, 0xA1, 0x77, 0xBA, 0x5C, 0x20, 0xB5, 0x60, 0xAE, 0xC8, 0xEC, 0x3A, 0x3A, 0xE8, 0x68, 0x0D, 0x98, 0x83, 0xAC, 0x8D, 0x27, 0xB6, 0x55, 0x5B, 0xA1, 0xE4, 0xCD, 0x3B, 0x61, 0x66, 0x0D, 0xB2, 0x17, 0xEA, 0x86, 0x44, 0x0D, 0x27, 0x0E, 0xC4, 0x70, 0x0C, 0x3B, 0xB6, 0x07, 0x82, 0xC9, 0xDC, 0x1E, 0x69, 0x29, 0x42, 0x17, 0x6F, 0xFE, 0x70, 0xFD, 0x0E, 0x24, 0x2B, 0xBD, 0x95, 0x73, 0x78, 0x6E, 0x82, 0xB0, 0x9A, 0x90, 0x4B, 0x9E, 0xD6, 0xA8, 0xD4, 0x45, 0x2F, 0x79, 0x07, 0x52, 0x9D, 0x49, 0x11, 0xEF, 0xAF, 0xEE, 0xA3, 0x4A, 0x70, 0x5D, 0x4B, 0x1D, 0xC6, 0xBB, 0x37, 0xD2, 0x37, 0x67, 0x84, 0xCA, 0x6C, 0x1A, 0x00, 0x0F, 0x03, 0x3A, 0xDB, 0x29, 0xE8, 0x4A, 0xD6, 0x96, 0x17, 0x21, 0xFE, 0x46, 0xFD, 0x9C, 0x51, 0xC6, 0x10, 0x5B, 0x44, 0xAA, 0xE2, 0xC5, 0x07, 0x69, 0x0D, 0x50, 0x14, 0x3E, 0x98, 0x6A, 0x92, 0x40, 0xB9, 0xAE, 0x4E, 0x00, 0x67, 0xAF, 0x4E, 0x12, 0x46, 0xF6, 0x24, 0x7D, 0xB2, 0xBB, 0x4B, 0xF3, 0x73, 0xBE, 0x55, 0xCF, 0x78, 0xDE, 0x1E, 0xD6, 0x2D, 0x11, 0xAF, 0x0E, 0x2D, 0x63, 0x53, 0x7B, 0x05, 0xC5, 0x1B, 0xE6, 0x8E, 0xC5, 0xDB, 0x4F, 0x5C, 0xB6, 0x2A, 0x71, 0xC6, 0xAA, 0x21, 0x77, 0xF7, 0xC9, 0x71, 0xF1, 0x4D, 0x40, 0x61, 0x10, 0x68, 0xAA, 0x97, 0x96, 0x69, 0x9A, 0x7D, 0x75, 0xED, 0x28, 0x61, 0x25, 0xA1, 0x61, 0x50, 0xDA, 0x35, 0xF0, 0xB6, 0xF1, 0xC8, 0xDB, 0x7E, 0x53, 0x8E, 0x3D, 0x5F, 0xD3, 0x7A, 0x1E, 0x02, 0xFF, 0x14, 0x00, 0x00, 0x0C, 0xC6, 0xE2, 0x8D, 0x34, 0x91, 0xC4, 0x74, 0xE7, 0x91, 0xD9, 0x68, 0xFD, ]
        let transcriptHash:[UInt8] = [0xAA, 0xF1, 0x36, 0xCE, 0x3E, 0x8A, 0x8E, 0xD8, 0x7E, 0x14, 0x83, 0x73, 0xD5, 0xAF, 0xF3, 0x70, 0xE1, 0x85, 0x6C, 0x5C, 0xA6, 0x60, 0x63, 0x60, 0xD1, 0x7A, 0x5B, 0xF1, 0x89, 0x74, 0xE1, 0x99, ]
        let verifyData:[UInt8] = [0x0E, 0x53, 0xF4, 0x2C, 0x3D, 0x24, 0x03, 0x32, 0x17, 0x52, 0xCB, 0xC1, ]

        let writeBulkKey: [UInt8] = [0xB5, 0xCD, 0x76, 0x1F, 0xFF, 0x20, 0xB2, 0xDA, 0xFA, 0x7A, 0x85, 0x5A, 0x29, 0x90, 0x74, 0x2B, 0x30, 0xF2, 0xEC, 0x8C, 0x21, 0xF6, 0xF0, 0xBA, 0xA3, 0x14, 0x7A, 0x43, 0xE3, 0x94, 0xC3, 0x3B, ]
        let macKey: [UInt8] = [0x41, 0x48, 0x86, 0x3C, 0x52, 0x95, 0xD9, 0x84, 0x26, 0xBF, 0x84, 0xA0, 0x14, 0x50, 0x17, 0xD9, 0xDF, 0x33, 0xDB, 0x08, 0x48, 0x77, 0xE0, 0xD2, 0x08, 0x97, 0xF1, 0xAB, 0x8C, 0x45, 0x7C, 0xF0, ]
        let plainTextRecordData: [UInt8] = [0x14, 0x00, 0x00, 0x0C, 0x0E, 0x53, 0xF4, 0x2C, 0x3D, 0x24, 0x03, 0x32, 0x17, 0x52, 0xCB, 0xC1, 0x73, 0x4E, 0x90, 0xBF, 0xA0, 0x0F, 0xCC, 0xCA, 0x8B, 0x14, 0x5D, 0xCF, 0x0E, 0xBA, 0x09, 0xCC, 0xED, 0xBB, 0x9E, 0xA1, 0xD7, 0xB0, 0xBA, 0x21, 0xEE, 0x25, 0x12, 0x92, 0x75, 0xBC, 0x5A, 0x4E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, ]
        let writeIV: [UInt8] = [0xEB, 0x85, 0x02, 0xC0, 0xEA, 0x07, 0x68, 0x00, 0xD7, 0x22, 0x36, 0xF0, 0x79, 0x54, 0xF3, 0x7D, ]
        let cipherText: [UInt8] = [0xEB, 0x85, 0x02, 0xC0, 0xEA, 0x07, 0x68, 0x00, 0xD7, 0x22, 0x36, 0xF0, 0x79, 0x54, 0xF3, 0x7D, 0x6E, 0xB8, 0x6A, 0xD1, 0x4C, 0xB6, 0x52, 0xBA, 0x6D, 0x62, 0x31, 0xD9, 0xAF, 0x6B, 0xAA, 0x80, 0x26, 0x52, 0x08, 0xCF, 0xA8, 0x83, 0x36, 0x17, 0x7C, 0x79, 0x71, 0x66, 0x0E, 0x63, 0x09, 0xAC, 0x9B, 0x20, 0x56, 0x8D, 0x4E, 0xD3, 0x83, 0x22, 0x94, 0x8F, 0x87, 0x47, 0xF9, 0xA8, 0x53, 0x18, 0x7C, 0xCA, 0xF4, 0x14, 0x32, 0x9A, 0x66, 0xF3, 0xB8, 0x27, 0xD0, 0xD0, 0xED, 0x01, 0x80, 0xF7, ]

        let n = HashAlgorithm.sha256.hashFunction(handshakeData.dropLast(0))
        XCTAssertEqual(transcriptHash, n)
        let s = TLSSecurityParameters()
        s.clientRandom = clientRandom
        s.serverRandom = serverRandom
        s.preMasterSecret = preMasterSecret
        s.transformParamters()

        let v = s.PRF(secret: s.masterSecret, label: TLSServerFinishedLabel, seed: n, outputLength: 12)
        XCTAssertEqual(v, verifyData)
                
        let data = TLSFinished(v).dataWithBytes()
            
        let MAC = s.calculateMessageMAC(secret: macKey, contentType: .handeshake, data: data, isRead: false)!
        var myPlantText = data + MAC
        let blockLength = 16
        if blockLength > 0 {
            let paddingLength = blockLength - ((myPlantText.count) % blockLength)
            if paddingLength != 0 {
                let padding = [UInt8](repeating: UInt8(paddingLength - 1), count: paddingLength)
                
                myPlantText.append(contentsOf: padding)
            }
        }
        XCTAssertEqual(myPlantText.toHexArray(), plainTextRecordData.toHexArray())
        
        let aes = try AES(key: writeBulkKey, blockMode: CBC(iv: writeIV), padding: .noPadding)
        let encrypted = try aes.encrypt(myPlantText)
        XCTAssertEqual(cipherText, writeIV+encrypted)
        
    }
}

