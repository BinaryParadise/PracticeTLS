//
//  File.swift
//  
//
//  Created by Rake Yang on 2021/9/14.
//

import Foundation

import Foundation
import XCTest
import Foundation
import CommonCrypto
import CryptoKit
@testable import PracticeTLS

class CHACHA20Tests: XCTestCase {
    func testEncrypt() throws {
        let pk =  "a3d6d21c2d68e63b847ab44b54b573044d1bb1f87e887a06b02923e908a817fc".uint8Array
        let key = SymmetricKey(data: pk)
        let data: [UInt8] = [UInt8](repeating: 1, count: 16)
        
        let writeIV = [UInt8](repeating: 2, count: 12)
        let authHeader = TLSRandomBytes(count: 13)
                
        // To encrypt
        let sealedBox = try ChaChaPoly.seal(data, using: key, nonce: .init(data: writeIV), authenticating: authHeader)
        let nonce = sealedBox.nonce.withUnsafeBytes { r in
            return [UInt8](r.bindMemory(to: UInt8.self))
        }
        
        print("nonce: \(nonce.count) cipher: \(sealedBox.ciphertext.count) tag: \(sealedBox.tag.count)")
    }
    
    func testChaChaMsg() throws {
        let cipherData: [UInt8] = "0933c0e51eba6137ed062a0ab5a5e0d1decdf57b10abe6cbd3de80c8f517d9d4".uint8Array
        let preMasterSecret:[UInt8] = [0x1A, 0xBC, 0xCD, 0x51, 0x40, 0x7B, 0x8E, 0x90, 0x11, 0x5E, 0xC8, 0x86, 0x13, 0x37, 0xBC, 0xB1, 0xF0, 0x76, 0xEC, 0x2F, 0xF2, 0x16, 0x7E, 0xB2, 0x45, 0x62, 0x19, 0xE7, 0xE6, 0x92, 0xF4, 0x05, ]
        let clientRandom:[UInt8] = [0x67, 0x66, 0xE1, 0x98, 0x9A, 0xAE, 0xF6, 0xD9, 0xF4, 0x30, 0x1A, 0x31, 0x80, 0xE6, 0xAB, 0x5A, 0x54, 0x48, 0xC1, 0xA1, 0xFB, 0x3D, 0xD3, 0xC7, 0x86, 0x46, 0xF0, 0x7D, 0x99, 0x6C, 0xCB, 0x6B, ]
        let serverRandom:[UInt8] = [0x26, 0xF0, 0xA4, 0xC8, 0x12, 0x6A, 0x07, 0xEA, 0xF0, 0x38, 0xC4, 0x04, 0x50, 0x67, 0xA3, 0x9A, 0xC3, 0xBA, 0xBB, 0x8D, 0xDD, 0x89, 0x29, 0x57, 0x0F, 0x95, 0xB3, 0x7B, 0x4E, 0x1C, 0x36, 0x52, ]
        let readBulkKey:[UInt8] = [0x1B, 0xBE, 0xC2, 0x3D, 0xBE, 0xC8, 0x00, 0xBE, 0xDF, 0xEF, 0xB5, 0x99, 0x80, 0x7D, 0xDB, 0x26, 0x89, 0xBB, 0xE1, 0xD2, 0x51, 0x9A, 0x36, 0x35, 0x35, 0x65, 0x6F, 0x0D, 0xA7, 0x94, 0x5F, 0x33, ]
        let readFixedIV:[UInt8] = "9ba006252f8a2b119883a04b".uint8Array
        let readMacKey:[UInt8] = []

        let writeBulkKey:[UInt8] = [0x0B, 0x9B, 0x67, 0xFA, 0xF1, 0xB8, 0x71, 0x0D, 0xC7, 0xEA, 0x0F, 0xE2, 0x5B, 0xCC, 0xB8, 0x06, 0x3A, 0x94, 0xC3, 0x74, 0xEE, 0xF3, 0x1D, 0x3B, 0x54, 0xF1, 0xE1, 0xDD, 0x11, 0x10, 0x0F, 0x60, ]
        let writeMacKey:[UInt8] = []
        let writeFixedIV:[UInt8] = "56cb31b9421a33b4c248af80".uint8Array
        let clientVerifyData:[UInt8] = [0x14, 0x00, 0x00, 0x0C, 0xFF, 0xFC, 0x2C, 0xDA, 0xE2, 0xB4, 0xA8, 0x52, 0x2B, 0xF9, 0x8A, 0x43, ]
        let serverVerifyData:[UInt8] = []
        
        let macHeader: [UInt8] = [0,0,0,0,0,0,0,0, 0x16, 3,3, 0,16]
        
        let box = try ChaChaPoly.open(.init(combined: readFixedIV+cipherData), using: .init(data: readBulkKey), authenticating: macHeader).bytes
        XCTAssertEqual(box, clientVerifyData)
    }
}
