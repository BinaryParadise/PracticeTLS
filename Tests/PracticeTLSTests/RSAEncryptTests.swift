//
//  File.swift
//  
//
//  Created by Rake Yang on 2021/8/10.
//

import XCTest
import Foundation
@testable import PracticeTLS

class RSAEncryptTests: XCTestCase {
    func testPreMaster() {
        let rawData: [UInt8] = [
         0x8d, 0x3f, 0x15, 0x29, 0x62, 0x52, 0x12, 0x8e, 0xfe, 0xda, 0xea, 0x8c, 0x04, 0x50, 0x87, 0x41,
         0xcb, 0x6e, 0x80, 0xd3, 0xd3, 0xf8, 0xaf, 0x23, 0x51, 0x50, 0x7b, 0xd9, 0x87, 0x57, 0xc4, 0x85,
         0x86, 0x26, 0x01, 0x7b, 0x5c, 0x4c, 0x9a, 0x75, 0xdc, 0x1a, 0x62, 0x34, 0xbb, 0x76, 0x52, 0xc9,
         0x9a, 0x66, 0x1c, 0x05, 0x99, 0x25, 0x98, 0x78, 0x3d, 0x75, 0x1c, 0x4b, 0xd3, 0x13, 0x4e, 0xd8,
         0x12, 0x66, 0x47, 0x24, 0x22, 0x9f, 0xfc, 0x64, 0xc8, 0x9c, 0x91, 0xd0, 0x0e, 0x70, 0xf3, 0xdd,
         0xc0, 0xc7, 0x0e, 0xeb, 0x2e, 0xc0, 0x51, 0x7e, 0xef, 0x42, 0x68, 0x73, 0x73, 0x92, 0x0a, 0xb6,
         0x99, 0x4b, 0x8f, 0x1b, 0x0b, 0x97, 0xf2, 0x42, 0x77, 0xeb, 0x4c, 0x59, 0xea, 0x4d, 0xb6, 0x22,
         0x59, 0x5b, 0xc2, 0x7c, 0xe8, 0xef, 0x7a, 0x6d, 0xe9, 0x1a, 0xa9, 0x5f, 0xd8, 0x23, 0xcf, 0xf4,
         0xda, 0x5e, 0xc8, 0x2b, 0x2e, 0xa4, 0xd6, 0x66, 0x32, 0x0b, 0x63, 0x7c, 0x61, 0xce, 0xcc, 0xeb,
         0x81, 0xbf, 0xa8, 0x2c, 0xa0, 0x75, 0x00, 0xcc, 0x58, 0xbd, 0xff, 0x2e, 0xd5, 0xe6, 0xbc, 0x67,
         0x83, 0x1b, 0xba, 0x4e, 0xe5, 0x16, 0xa9, 0x57, 0x35, 0x81, 0x02, 0x6a, 0x49, 0xd3, 0x7c, 0xfc,
         0xf9, 0xb2, 0x4e, 0x21, 0x7a, 0x38, 0xa4, 0xb0, 0x8d, 0xce, 0x41, 0xa1, 0x33, 0x62, 0x50, 0xd1,
         0x58, 0x7d, 0xd7, 0x4c, 0x39, 0x15, 0xfa, 0x81, 0xa2, 0xee, 0xc1, 0xe6, 0x09, 0x4d, 0x00, 0x00,
         0xb9, 0xd8, 0x9b, 0x26, 0x80, 0x69, 0xca, 0xde, 0xb6, 0xec, 0x41, 0x83, 0x95, 0x2d, 0x70, 0xca,
         0x86, 0x51, 0x8d, 0x39, 0x14, 0x12, 0x3e, 0x31, 0x95, 0x52, 0x25, 0x4e, 0x41, 0x06, 0x66, 0x3e,
         0xd4, 0x3a, 0x6b, 0xaa, 0x9a, 0x3e, 0xc0, 0xd2, 0xfa, 0x45, 0xa8, 0x9e, 0xd4, 0xc1, 0xa4, 0xae,
        ]

        let origin = Data(rawData)
        if let decrypted = RSAUtils.shared.decrypted(origin) {
            if let encrypted = RSAUtils.shared.encrypted(decrypted) {
                XCTAssertEqual(origin, encrypted)
                return
            }
        }
        XCTFail()
    }
    
    func testPlantext() {
        let origin = "0123456789012345678901234567890123456789abcdefgh".data(using: .utf8)!
        if let encrypted = RSAUtils.shared.encrypted(origin) {
            if let decrypted = RSAUtils.shared.decrypted(encrypted) {
                XCTAssertEqual(origin, decrypted)
                return
            }
        }
        XCTFail()
    }
}
