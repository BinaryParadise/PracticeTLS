import XCTest
import class Foundation.Bundle
@testable import PracticeTLS

final class TLSHandshakeMessageTests: XCTestCase {
    
    func testStream() throws {
        var stream = DataStream(bytes: [9,1,2,3,4,5])
        XCTAssertEqual(stream.readByte(), 9)
        XCTAssertEqual(stream.read(count: 3), [1,2,3])
        XCTAssertEqual(stream.read(count: 2), [4,5])
        XCTAssertEqual(stream.read(count: 10), nil)
        XCTAssertEqual(stream.position, 0)
    }
    
    func testHandshakeMessageFromData() throws {
        let rawData:[UInt8] = [
            0x16, 0x03, 0x01, 0x00, 0xe8, 0x01, 0x00, 0x00, 0xe4, 0x03, 0x03, 0x72, 0x26, 0xb1, 0xa2, 0xa7,
            0x9a, 0xf9, 0xdc, 0xbc, 0xe1, 0x35, 0x29, 0x41, 0x31, 0x46, 0x1a, 0xd8, 0x8c, 0xe4, 0xa0, 0xe1,
            0x1d, 0x80, 0x28, 0x40, 0xf7, 0x1e, 0x6f, 0xbc, 0xcf, 0xf1, 0x93, 0x00, 0x00, 0x28, 0xc0, 0x2c,
            0xc0, 0x2b, 0xc0, 0x24, 0xc0, 0x23, 0xc0, 0x0a, 0xc0, 0x09, 0xcc, 0xa9, 0xc0, 0x30, 0xc0, 0x2f,
            0xc0, 0x28, 0xc0, 0x27, 0xc0, 0x14, 0xc0, 0x13, 0xcc, 0xa8, 0x00, 0x9d, 0x00, 0x9c, 0x00, 0x3d,
            0x00, 0x3c, 0x00, 0x35, 0x00, 0x2f, 0x01, 0x00, 0x00, 0x93, 0xff, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x17, 0x00, 0x15, 0x00, 0x00, 0x12, 0x63, 0x73, 0x67, 0x6f, 0x2e, 0x7a, 0x68, 0x65,
            0x67, 0x65, 0x62, 0x75, 0x6c, 0x61, 0x2e, 0x74, 0x6f, 0x70, 0x00, 0x17, 0x00, 0x00, 0x00, 0x0d,
            0x00, 0x14, 0x00, 0x12, 0x04, 0x03, 0x08, 0x04, 0x04, 0x01, 0x05, 0x03, 0x08, 0x05, 0x05, 0x01,
            0x08, 0x06, 0x06, 0x01, 0x02, 0x01, 0x00, 0x05, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x33,
            0x74, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x10, 0x00, 0x30, 0x00, 0x2e, 0x02, 0x68, 0x32,
            0x05, 0x68, 0x32, 0x2d, 0x31, 0x36, 0x05, 0x68, 0x32, 0x2d, 0x31, 0x35, 0x05, 0x68, 0x32, 0x2d,
            0x31, 0x34, 0x08, 0x73, 0x70, 0x64, 0x79, 0x2f, 0x33, 0x2e, 0x31, 0x06, 0x73, 0x70, 0x64, 0x79,
            0x2f, 0x33, 0x08, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x31, 0x2e, 0x31, 0x00, 0x0b, 0x00, 0x02, 0x01,
            0x00, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x06, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x18]
        
        if let msg = TLSHandshakeMessage.fromData(data: Data(rawData)) as? TLSClientHello {
            XCTAssertEqual(msg.contentLength, 232)
            XCTAssertEqual(msg.handshakeType, .clientHello)
            XCTAssertEqual(msg.bodyLength, 228)
            XCTAssertEqual(msg.clientVersion, TLSVersion.V1_2)
        } else {
            XCTFail()
        }
    }
    
    func testServerHelloTests() throws {
        let hello = TLSServerHello(stream: DataStream(TLSServerHello().dataWithBytes()))
        XCTAssertEqual(hello?.type, .handeshake)
        XCTAssertEqual(hello?.handshakeType, .serverHello)
        XCTAssertEqual(hello?.contentLength, 48)
        XCTAssertEqual(hello?.bodyLength, 44)
        XCTAssertEqual(hello?.clientVersion, TLSVersion.V1_2)
    }
}
